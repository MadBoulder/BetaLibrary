
function filter_items_by_query(search_query, items) {
	if (search_query === "")
		items.show();
	else {
		items.hide();
		items.each(function() {
			var rowName = $(this).find(".table-row-name").text().toLowerCase();
			if (rowName.indexOf(search_query) !== -1) {
				$(this).show();
			}
		});
	}
};

$.fn.dataTable.ext.type.order['custom-grade-pre'] = function(data) {
	var fontMapping = {
		'1a': 1,
		'1b': 2,
		'1c': 3,
		'2a': 4,
		'2b': 5,
		'2c': 6,
		'3': 8,
		'3a': 9,
		'3b': 10,
		'3+': 11,
		'3c': 12,
		'4-': 14,
		'4': 15,
		'4a': 16,
		'4b': 17,
		'4+': 18,
		'4c': 19,
		'5': 25,
		'5a': 26,
		'5b': 27,
		'5+': 28,
		'5c': 29,
		'5+/6a': 35,
		'6a':36,
		'6a/+': 38,
		'6a/a+': 38,
		'6a/6a+': 38,
		'6a+': 39,
		'6a+/b': 40,
		'6a+/6b': 40,
		'6b': 41,
		'6b/+': 43,
		'6b/b+': 43,
		'6b/6b+': 43,
		'6b+': 44,
		'6b+/c': 45,
		'6b+/6c': 45,
		'6c': 46,
		'6c/+': 48,
		'6c/c+': 48,
		'6c/6c+': 48,
		'6c+': 49,
		'6c+/7a': 50,
		'7a': 60,
		'7a/+': 62,
		'7a/a+': 62,
		'7a/7a+': 62,
		'7a+': 63,
		'7a+/b': 64,
		'7a+/7b': 64,
		'7b': 65,
		'7b/+': 67,
		'7b/b+': 67,
		'7b/7b+': 67,
		'7b+': 68,
		'7b+/c': 69,
		'7b+/7c': 69,
		'7c': 70,
		'7c/+': 72,
		'7c/c+': 72,
		'7c/7c+': 72,
		'7c+': 73,
		'7c+/8a': 74,
		'8a': 80,
		'8a/+': 82,
		'8a/a+': 82,
		'8a/8a+': 82,
		'8a+': 83,
		'8a+/b': 84,
		'8a+/8b': 84,
		'8b': 85,
		'8b/+': 87,
		'8b/b+': 87,
		'8b/8b+': 87,
		'8b+': 88,
		'8b+/c': 89,
		'8b+/8c': 89,
		'8c': 90,
		'8c/+': 92,
		'8c/c+': 92,
		'8c/8c+': 92,
		'8c+': 93,
		'8c+/9a': 94,
		'9a': 100,
		'9a/+': 102,
		'9a/a+': 102,
		'9a/9a+': 102,
		'9a+': 103,
		'9a+/b': 104,
		'9a+/9b': 104,
		'9b': 106,
	};
	
	var VScaleMapping = {
		'VB': 8,
		'V0-': 14,
		'V0': 15,
		'V0+': 18,
		'V1-': 24,
		'V1': 25,
		'V1+': 26,
		'V1-V2': 27,
		'V1-2': 27,
		'V1/V2': 27,
		'V1/2': 27,
		'V2-': 28,
		'V2': 29,
		'V2+': 30,
		'V2-V3': 31,
		'V2-3': 31,
		'V2/V3': 31,
		'V2/3': 31,
		'V3-': 35,
		'V3': 36,
		'V3+': 37,
		'V3-V4': 38,
		'V3-4': 38,
		'V3/V4': 38,
		'V3/4': 38,
		'V4-': 40,
		'V4': 41,
		'V4+': 42,
		'V4-V5': 43,
		'V4-5': 43,
		'V4/V5': 43,
		'V4/5': 43,
		'V5-': 45,
		'V5': 46,
		'V5+': 47,
		'V5-V6': 48,
		'V5-6': 48,
		'V5/V6': 48,
		'V5/6': 48,
		'V6-': 57,
		'V6': 58,
		'V6+': 59,
		'V6-V7': 60,
		'V6-7': 60,
		'V6/V7': 60,
		'V6/7': 60,
		'V7-': 61,
		'V7': 62,
		'V7+': 63,
		'V7-V8': 64,
		'V7-8': 64,
		'V7/V8': 64,
		'V7/8': 64,
		'V8-': 65,
		'V8': 66,
		'V8+': 67,
		'V8-V9': 68,
		'V8-9': 68,
		'V8/V9': 68,
		'V8/9': 68,
		'V9-': 69,
		'V9': 70,
		'V9+': 71,
		'V9-V10': 72,
		'V9-10': 72,
		'V9/V10': 72,
		'V9/10': 72,
		'V10-': 73,
		'V10': 74,
		'V10+': 75,
		'V10-V11': 76,
		'V10-11': 76,
		'V10/V11': 76,
		'V10/11': 76,
		'V11-': 77,
		'V11': 78,
		'V11+': 79,
		'V11-V12': 80,
		'V11-12': 80,
		'V11/V12': 80,
		'V11/12': 80,
		'V12-': 81,
		'V12': 82,
		'V12+': 83,
		'V12-V13': 84,
		'V12-13': 84,
		'V12/V13': 84,
		'V12/13': 84,
		'V13-': 85,
		'V13': 86,
		'V13+': 87,
		'V13-V14': 88,
		'V13-14': 88,
		'V13/V14': 88,
		'V13/14': 88,
		'V14-': 89,
		'V14': 90,
		'V14+': 91,
		'V14-V15': 91,
		'V14-15': 91,
		'V14/V15': 91,
		'V14/15': 91,
		'V15-': 92,
		'V15': 93,
		'V15+': 94,
		'V15-V16': 95,
		'V15-16': 95,
		'V15/V16': 95,
		'V15/16': 95,
		'V16-': 96,
		'V16': 97,
		'V16+': 98,
		'V16-V17': 99,
		'V16-17': 99,
		'V16/V17': 99,
		'V16/17': 99,
		'V17-': 100,
		'V17': 101,
		'V17+': 102,
		'V18-V19': 103,
		'V18-19': 103,
		'V18/V19': 103,
		'V18/19': 103,
		'V18-': 104,
		'V18': 105,
		'V18+': 106,
		'V18-V19': 107,
		'V18-19': 107,
		'V18/V19': 107,
		'V18/19': 107,
		'V19-': 108,
		'V19': 109,
		'V19+': 110,
	};
	
	// Remove parentheses and their contents using a regular expression
	data = data.replace(/\([^)]*\)/g, '').replace(/\?/g, '').trim();
	if (data.startsWith('V')) {
		if (VScaleMapping[data]) {
			return VScaleMapping[data];
		}
	} 
	else if (data.startsWith('B')) {
		var numericValue = parseInt(data.substring(1), 10);
		if (!isNaN(numericValue)) {
			return numericValue;
		}
	}
	
	data = data.toLowerCase();
	if (fontMapping[data]) {
		return fontMapping[data];
	}

	return 1;
};